{"ast":null,"code":"var _jsxFileName = \"E:\\\\ZTM\\\\Tasks3\\\\crwn-cloth\\\\src\\\\components\\\\sign-up\\\\sign-up.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { signUpStart } from '../../redux/user/user.actions';\nimport { SignUpContainer, SignUpTitle } from './sign-up.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nSignUp = _s(({\n  signUpStart\n}) => {\n  _s();\n\n  const [userCredentials, setUserCredentials] = useState({\n    displayName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  } = userCredentials;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert(\"passwords don't match\");\n      return;\n    }\n\n    signUpStart({\n      displayName,\n      email,\n      password\n    });\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUserCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(SignUpContainer, {\n    children: [/*#__PURE__*/_jsxDEV(SignUpTitle, {\n      children: \"I do not have a account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign up with your email and password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"sign-up-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"text\",\n        name: \"displayName\",\n        value: displayName,\n        onChange: handleChange,\n        label: \"Display Name\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"email\",\n        name: \"email\",\n        value: email,\n        onChange: handleChange,\n        label: \"Email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"password\",\n        name: \"password\",\n        value: password,\n        onChange: handleChange,\n        label: \"Password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"password\",\n        name: \"confirmPassword\",\n        value: confirmPassword,\n        onChange: handleChange,\n        label: \"Confirm Password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n        type: \"submit\",\n        children: \"SIGN UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}, \"iyJYssjXee83/cyVLupHEV4Fb2E=\");\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: userCredentials => dispatch(signUpStart(userCredentials))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);","map":{"version":3,"sources":["E:/ZTM/Tasks3/crwn-cloth/src/components/sign-up/sign-up.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","signUpStart","SignUpContainer","SignUpTitle","SignUp","userCredentials","setUserCredentials","displayName","email","password","confirmPassword","handleSubmit","event","preventDefault","alert","handleChange","name","value","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport FormInput from '../form-input/form-input.component';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\n\r\nimport { signUpStart  } from '../../redux/user/user.actions';\r\n\r\nimport { SignUpContainer, SignUpTitle } from './sign-up.styles';\r\n\r\nSignUp = ({ signUpStart }) => {\r\n  const [userCredentials, setUserCredentials] = useState({\r\n    displayName: '',\r\n    email: '',\r\n    password:'',\r\n    confirmPassword: ''\r\n  });\r\n\r\n  const { displayName, email, password, confirmPassword } = userCredentials;\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    if (password !== confirmPassword) {\r\n      alert(\"passwords don't match\");\r\n      return;\r\n    }\r\n    signUpStart({ displayName, email, password })\r\n  };\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setUserCredentials({...userCredentials, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <SignUpContainer>\r\n      <SignUpTitle>I do not have a account</SignUpTitle>\r\n      <span>Sign up with your email and password</span>\r\n      <form className='sign-up-form' onSubmit={handleSubmit}>\r\n        <FormInput\r\n          type='text'\r\n          name='displayName'\r\n          value={displayName}\r\n          onChange={handleChange}\r\n          label='Display Name'\r\n          required\r\n        />\r\n        <FormInput\r\n          type='email'\r\n          name='email'\r\n          value={email}\r\n          onChange={handleChange}\r\n          label='Email'\r\n          required\r\n        />\r\n        <FormInput\r\n          type='password'\r\n          name='password'\r\n          value={password}\r\n          onChange={handleChange}\r\n          label='Password'\r\n          required\r\n        />\r\n        <FormInput\r\n          type='password'\r\n          name='confirmPassword'\r\n          value={confirmPassword}\r\n          onChange={handleChange}\r\n          label='Confirm Password'\r\n          required\r\n        />\r\n        <CustomButton type='submit'>SIGN UP</CustomButton>\r\n      </form>\r\n    </SignUpContainer>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  signUpStart: (userCredentials) => dispatch(signUpStart(userCredentials))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(SignUp);\r\n"]},"metadata":{},"sourceType":"module"}